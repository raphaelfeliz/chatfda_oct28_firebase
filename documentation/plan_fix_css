* Fix the “grey square” by restoring correct styling to the launcher inside the shadow DOM.

---

# 1 Phase: Identify root styling cause

* Pinpoint why the widget renders unstyled (grey square) after successful CORS fixes.

## 1.1 Inspect runtime behavior

* Observe console logs and confirm if CSS file requested by the widget returns **200** or **404**.
* **Success evidence:** `curl -I` for the CSS URL returns HTTP 200 and correct content type.

## 1.2 Confirm CSS presence inside the shadow root

* Check in browser devtools whether a `<link rel="stylesheet">` (or inline style) exists inside the widget’s shadow root.
* **Success evidence:** The link or style node appears under `#shadow-root` with correct CSS rules.

## 1.3 Verify that classnames from index.css apply

* Inspect the `<button class="chat-launcher-button">` element and confirm that the corresponding CSS rules appear active in the Styles pane.
* **Success evidence:** `.chat-launcher-button` properties (background-color, border-radius, etc.) are visible and applied.

## 1.4 Checkpoint test: browser reload

* Reload the page and verify visually that the launcher button now appears styled (round, colored, with icon).
* **Success evidence:** Launcher shows proper shape, color, and hover scaling instead of a grey rectangle.

---

# 2 Phase: Repair CSS injection

* Replace fragile hard-coded CSS loading with a build-safe, consistent method.

## 2.1 Implement a build-aware CSS reference

* Switch from manually typed URLs to dynamically resolved imports (via build system).
* **Success evidence:** On rebuild, the CSS link automatically updates to the new hashed filename, and no 404 occurs.

## 2.2 Check that CSS loads without CORS or 404

* Re-deploy and fetch the new CSS URL via curl or Network tab.
* **Success evidence:** HTTP 200 with `content-type: text/css` and `access-control-allow-origin: *`.

## 2.3 Checkpoint test: rebuild and reload widget

* Run a fresh build, deploy, and load the page.
* **Success evidence:** Widget styles appear immediately with no manual filename edits required.

---

# 3 Phase: Validate widget presentation

* Ensure that React correctly renders and toggles launcher → chat window.

## 3.1 Verify button visibility and clickability

* Hover/click the launcher; confirm that it expands to show chat.
* **Success evidence:** Click toggles between open and closed states; animations play.

## 3.2 Confirm icon rendering

* Inspect inside the launcher for the `<svg>` or icon markup.
* **Success evidence:** Icon is visible (white on dark background).

## 3.3 Checkpoint test: user interaction

* Perform a full interaction sequence (open, close, reopen).
* **Success evidence:** Consistent visuals, smooth animation, no layout jump.

---

# 4 Phase: Harden future builds

* Eliminate risk of style drift or hash mismatch in subsequent deploys.

## 4.1 Add type declarations or fallback style method

* Ensure the chosen CSS import technique is supported and type-safe.
* **Success evidence:** Builds succeed with no missing module errors.

## 4.2 Optional inline style fallback

* If dynamic import ever fails, ensure a simple `<style>` injection path exists.
* **Success evidence:** Widget still displays styled even if the CSS URL breaks.

## 4.3 Checkpoint test: simulate broken CSS link

* Temporarily rename CSS file and reload widget to test fallback logic.
* **Success evidence:** Widget remains styled or emits clear console warning rather than going grey.
